import numpy as np

# *****************************************************************************
def dilu(a, neq: int):
    """
    ***************************************************************************
    * DATA DE CRIACAO  : 26/09/2020                                           *
    * DATA DE MODIFICAO: 00/00/0000                                           *
    * ----------------------------------------------------------------------- *
    * dilu: monta o precondionador DILU                                       *
    * ----------------------------------------------------------------------- *
    * Parametros de entrada:                                                  *
    * ----------------------------------------------------------------------- *
    * a   - matriz de coeficientes n x n                                      *
    * neq - numero de equacoes                                                *
    * ----------------------------------------------------------------------- *
    * Parametros de saida:                                                    *
    * ----------------------------------------------------------------------- *
    * m    - retrona o precondicionador n x 1                                *
    * ----------------------------------------------------------------------- *
    * OBS:                                                                    *
    * ----------------------------------------------------------------------- *
    *
    ***************************************************************************
    """

    m = np.ones((neq,1),dtype=float)

    for i in range(0, neq):
        m[i, 0] = a[i, i]

    for i in range(0, neq):
        for j in range(i + 1, neq):
            m[j, 0] -= a[j, i]*a[i, j]/m[i, 0]

    return m
# *****************************************************************************

# *****************************************************************************
def fb_dilu(r, a, d, neq: int):
    """
    ***************************************************************************
    * DATA DE CRIACAO  : 26/09/2020                                           *
    * DATA DE MODIFICAO: 00/00/0000                                           *
    * ----------------------------------------------------------------------- *
    * fb_dilu: forward e backward substituicao                                *
    * ----------------------------------------------------------------------- *
    * Parametros de entrada:                                                  *
    * ----------------------------------------------------------------------- *
    * r   - vetor de indepemdente n x 1                                       *
    * a   - matriz de coeficientes n x n                                      *
    * d   - diagonal modificada  do precondicionador n x 1                    *
    * neq - numero de equacoes                                                *
    * ----------------------------------------------------------------------- *
    * Parametros de saida:                                                    *
    * ----------------------------------------------------------------------- *
    * y    - retorna a solução                                               *
    * ----------------------------------------------------------------------- *
    * OBS:                                                                    *
    * ----------------------------------------------------------------------- *
    * y = M(-1) r
    ***************************************************************************
    """

    t   = np.zeros((neq,1),dtype=float)

    for i in range(0, neq):
        t[i, 0] = r[i, 0] / d[i, 0]
        for j in range(0, i):
            t[i, 0] -= a[i, j] * t[j, 0] / d[i, 0]

    for i in range(neq-1, -1, -1):
        for j in range(i + 1, neq):
            t[i, 0] -= a[i, j] * t[j, 0] / d[i, 0]

    return t
# *****************************************************************************


# *****************************************************************************
def pre_cond_solver(m, a, r ,neq: int, preC: int):
    """
    ***************************************************************************
    * DATA DE CRIACAO  : 28/02/2019                                           *
    * DATA DE MODIFICAO: 26/09/2020                                           *
    * ----------------------------------------------------------------------- *
    * pre_cond_solver: solucao do sistema do precondicionador                 *
    * ----------------------------------------------------------------------- *
    * Parametros de entrada:                                                  *
    * ----------------------------------------------------------------------- *
    * m   - matriz de coefientes n x 1                                        *
    * r   - matriz de coefientes n x 1                                        *
    * a   - matriz de coeficientes nxn                                        *
    * neq - numero de linhas e colunas                                        *
    * presC - tipo de precondicinador                                         *
    *         0 - nenhum                                                      *
    *         1 - diagonal                                                    *
    *         2 - dilu                                                        *
    * ----------------------------------------------------------------------- *
    * Parametros de saida:                                                    *
    * ----------------------------------------------------------------------- *
    * m    - retorna o precodicionador                                        *
    * ----------------------------------------------------------------------- *
    * OBS:                                                                    *
    * ----------------------------------------------------------------------- *
    * y = M(-1) r
    ***************************************************************************
    """
    if preC == 0:
        y = r
    elif preC == 1:
        y = m*r
    elif preC == 2:
        y = fb_dilu(r, a, m, neq)

    return y
# *****************************************************************************
#
# *****************************************************************************
def pre_make(a, preCond: int, neq: int):
    """
    ***************************************************************************
    * DATA DE CRIACAO  : 28/02/2019                                           *
    * DATA DE MODIFICAO: 24/09/2020                                           *
    * ----------------------------------------------------------------------- *
    * pre_make: monta os precondicionadores                                    *
    * ----------------------------------------------------------------------- *
    * Parametros de entrada:                                                  *
    * ----------------------------------------------------------------------- *
    * a       - matriz de coefientes n x n                                    *
    * preCond - tipo do precondicionador                                      *
    *         0 - nenhum                                                      *
    *         1 - Jacobi                                                      *
    * neq     - numero de linhas e colunas                                    *
    * ----------------------------------------------------------------------- *
    * Parametros de saida:                                                    *
    * ----------------------------------------------------------------------- *
    * m    - retorna o inverso do coefiente da diagonal                       *
    * ----------------------------------------------------------------------- *
    * OBS:                                                                    *
    * ----------------------------------------------------------------------- *
    * m e um vetor e a uma matriz quadrade cheia                              *
    ***************************************************************************
    """

    # ... nenhum
    if preCond == 0:
        m = np.ones((neq,1),dtype=float)

    # ... Jacobi
    elif preCond == 1:
        m = np.zeros((neq,1),dtype=float)
        for i in range(0,neq):
            m[i,0] = 1.0/a[i,i]

    # ... DILU(0)
    elif preCond == 2:
        m = dilu(a, neq)

    return m
# **********************************************************************
